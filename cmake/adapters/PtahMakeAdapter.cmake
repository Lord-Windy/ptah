# Copyright 2025 Samuel "Lord-Windy" Brown
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Make Build System Adapter for Ptah Library Manager
# Handles traditional Makefile-based libraries

function(ptah_build_make_library NAME SOURCE_DIR INSTALL_DIR)
    set(multiValueArgs BUILD_OPTIONS MAKE_TARGETS)
    cmake_parse_arguments(ARG "" "" "${multiValueArgs}" ${ARGN})
    
    # Find make
    find_program(MAKE_EXECUTABLE make)
    if(NOT MAKE_EXECUTABLE)
        message(FATAL_ERROR "Ptah Make: make not found")
    endif()
    
    message(STATUS "Ptah Make: Building ${NAME}")
    
    # Determine make targets
    set(BUILD_TARGETS ${ARG_MAKE_TARGETS})
    if(NOT BUILD_TARGETS)
        set(BUILD_TARGETS "all")
    endif()
    
    # Set common make variables
    set(MAKE_VARS
        "PREFIX=${INSTALL_DIR}"
        "DESTDIR="
    )
    
    # Add any additional build options
    if(ARG_BUILD_OPTIONS)
        list(APPEND MAKE_VARS ${ARG_BUILD_OPTIONS})
    endif()
    
    # Build
    execute_process(
        COMMAND ${MAKE_EXECUTABLE} ${BUILD_TARGETS} ${MAKE_VARS}
        WORKING_DIRECTORY ${SOURCE_DIR}
        RESULT_VARIABLE BUILD_RESULT
        OUTPUT_VARIABLE BUILD_OUTPUT
        ERROR_VARIABLE BUILD_ERROR
    )
    
    if(NOT BUILD_RESULT EQUAL 0)
        message(FATAL_ERROR "Ptah Make: Build failed for ${NAME}:\n${BUILD_ERROR}")
    endif()
    
    message(STATUS "Ptah Make: Installing ${NAME}")
    
    # Install
    execute_process(
        COMMAND ${MAKE_EXECUTABLE} install ${MAKE_VARS}
        WORKING_DIRECTORY ${SOURCE_DIR}
        RESULT_VARIABLE INSTALL_RESULT
        OUTPUT_VARIABLE INSTALL_OUTPUT
        ERROR_VARIABLE INSTALL_ERROR
    )
    
    if(NOT INSTALL_RESULT EQUAL 0)
        message(WARNING "Ptah Make: Install failed for ${NAME}, attempting manual installation")
        ptah_make_manual_install(${NAME} ${SOURCE_DIR} ${INSTALL_DIR})
    endif()
    
    # Generate CMake config
    ptah_make_generate_cmake_config(${NAME} ${INSTALL_DIR})
    
    # Mark as installed
    ptah_mark_library_installed(${NAME})
    
    message(STATUS "Ptah Make: Successfully built and installed ${NAME}")
endfunction()

function(ptah_make_manual_install NAME SOURCE_DIR INSTALL_DIR)
    message(STATUS "Ptah Make: Performing manual installation for ${NAME}")
    
    # Install libraries
    file(GLOB_RECURSE STATIC_LIBS "${SOURCE_DIR}/*.a")
    file(GLOB_RECURSE SHARED_LIBS "${SOURCE_DIR}/*.so" "${SOURCE_DIR}/*.dylib")
    
    if(STATIC_LIBS OR SHARED_LIBS)
        file(MAKE_DIRECTORY "${INSTALL_DIR}/lib")
        foreach(LIB ${STATIC_LIBS} ${SHARED_LIBS})
            file(COPY ${LIB} DESTINATION "${INSTALL_DIR}/lib")
        endforeach()
    endif()
    
    # Install headers
    file(GLOB_RECURSE HEADERS "${SOURCE_DIR}/*.h" "${SOURCE_DIR}/*.hpp")
    if(HEADERS)
        file(MAKE_DIRECTORY "${INSTALL_DIR}/include")
        foreach(HEADER ${HEADERS})
            # Skip headers in build directories
            string(FIND ${HEADER} "/build/" BUILD_POS)
            string(FIND ${HEADER} "/.build/" DOT_BUILD_POS)
            if(BUILD_POS EQUAL -1 AND DOT_BUILD_POS EQUAL -1)
                file(COPY ${HEADER} DESTINATION "${INSTALL_DIR}/include")
            endif()
        endforeach()
    endif()
    
    # Install executables
    file(GLOB EXECUTABLES "${SOURCE_DIR}/*")
    foreach(EXEC ${EXECUTABLES})
        if(IS_EXECUTABLE ${EXEC} AND NOT IS_DIRECTORY ${EXEC})
            get_filename_component(EXEC_EXT ${EXEC} EXT)
            if(EXEC_EXT STREQUAL "")
                file(MAKE_DIRECTORY "${INSTALL_DIR}/bin")
                file(COPY ${EXEC} DESTINATION "${INSTALL_DIR}/bin")
            endif()
        endif()
    endforeach()
endfunction()

function(ptah_make_generate_cmake_config NAME INSTALL_DIR)
    set(CONFIG_DIR "${INSTALL_DIR}/share/cmake/${NAME}")
    set(CONFIG_FILE "${CONFIG_DIR}/${NAME}Config.cmake")
    
    file(MAKE_DIRECTORY ${CONFIG_DIR})
    
    # Find installed libraries
    file(GLOB_RECURSE STATIC_LIBS "${INSTALL_DIR}/lib/*.a")
    file(GLOB_RECURSE SHARED_LIBS "${INSTALL_DIR}/lib/*.so" "${INSTALL_DIR}/lib/*.dylib")
    
    set(LIBS ${STATIC_LIBS})
    if(NOT LIBS)
        set(LIBS ${SHARED_LIBS})
    endif()
    
    # Generate config content
    set(CONFIG_CONTENT "# Generated by Ptah Library Manager
# CMake configuration for ${NAME} (Make-based library)

include(CMakeFindDependencyMacro)

# Define the target
if(NOT TARGET ${NAME}::${NAME})
    add_library(${NAME}::${NAME} INTERFACE IMPORTED)
    
    # Set include directories
    set_target_properties(${NAME}::${NAME} PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES \"${INSTALL_DIR}/include\"
    )
")
    
    # Add libraries if found
    if(LIBS)
        string(APPEND CONFIG_CONTENT "    
    # Set library paths
    set_target_properties(${NAME}::${NAME} PROPERTIES
        INTERFACE_LINK_LIBRARIES \"")
        
        foreach(LIB ${LIBS})
            string(APPEND CONFIG_CONTENT "${LIB};")
        endforeach()
        
        string(APPEND CONFIG_CONTENT "\"
    )
")
    endif()
    
    string(APPEND CONFIG_CONTENT "endif()

# Mark as found
set(${NAME}_FOUND TRUE)
set(${NAME}_INCLUDE_DIRS \"${INSTALL_DIR}/include\")
set(${NAME}_LIBRARIES \"")
    
    foreach(LIB ${LIBS})
        string(APPEND CONFIG_CONTENT "${LIB};")
    endforeach()
    
    string(APPEND CONFIG_CONTENT "\")
")
    
    file(WRITE ${CONFIG_FILE} ${CONFIG_CONTENT})
endfunction()