# Copyright 2025 Samuel "Lord-Windy" Brown
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Meson Build System Adapter for Ptah Library Manager
# Handles Meson-based libraries

function(ptah_build_meson_library NAME SOURCE_DIR INSTALL_DIR)
    # Find meson
    find_program(MESON_EXECUTABLE meson)
    if(NOT MESON_EXECUTABLE)
        message(FATAL_ERROR "Ptah Meson: meson not found. Please install Meson.")
    endif()
    
    # Find ninja (preferred backend)
    find_program(NINJA_EXECUTABLE ninja)
    
    set(BUILD_DIR "${PTAH_BUILD_DIR}/${NAME}")
    
    message(STATUS "Ptah Meson: Configuring ${NAME}")
    
    # Setup meson
    execute_process(
        COMMAND ${MESON_EXECUTABLE} setup ${BUILD_DIR} ${SOURCE_DIR}
            --prefix=${INSTALL_DIR}
            --buildtype=release
        RESULT_VARIABLE SETUP_RESULT
        OUTPUT_VARIABLE SETUP_OUTPUT
        ERROR_VARIABLE SETUP_ERROR
    )
    
    if(NOT SETUP_RESULT EQUAL 0)
        message(FATAL_ERROR "Ptah Meson: Setup failed for ${NAME}:\n${SETUP_ERROR}")
    endif()
    
    message(STATUS "Ptah Meson: Building ${NAME}")
    
    # Build
    if(NINJA_EXECUTABLE)
        execute_process(
            COMMAND ${NINJA_EXECUTABLE} -C ${BUILD_DIR}
            RESULT_VARIABLE BUILD_RESULT
            OUTPUT_VARIABLE BUILD_OUTPUT
            ERROR_VARIABLE BUILD_ERROR
        )
    else()
        execute_process(
            COMMAND ${MESON_EXECUTABLE} compile -C ${BUILD_DIR}
            RESULT_VARIABLE BUILD_RESULT
            OUTPUT_VARIABLE BUILD_OUTPUT
            ERROR_VARIABLE BUILD_ERROR
        )
    endif()
    
    if(NOT BUILD_RESULT EQUAL 0)
        message(FATAL_ERROR "Ptah Meson: Build failed for ${NAME}:\n${BUILD_ERROR}")
    endif()
    
    message(STATUS "Ptah Meson: Installing ${NAME}")
    
    # Install
    execute_process(
        COMMAND ${MESON_EXECUTABLE} install -C ${BUILD_DIR}
        RESULT_VARIABLE INSTALL_RESULT
        OUTPUT_VARIABLE INSTALL_OUTPUT
        ERROR_VARIABLE INSTALL_ERROR
    )
    
    if(NOT INSTALL_RESULT EQUAL 0)
        message(FATAL_ERROR "Ptah Meson: Installation failed for ${NAME}:\n${INSTALL_ERROR}")
    endif()
    
    # Generate CMake config if needed
    ptah_meson_ensure_cmake_config(${NAME} ${INSTALL_DIR})
    
    # Mark as installed
    ptah_mark_library_installed(${NAME})
    
    message(STATUS "Ptah Meson: Successfully built and installed ${NAME}")
endfunction()

function(ptah_meson_ensure_cmake_config NAME INSTALL_DIR)
    set(CONFIG_DIR "${INSTALL_DIR}/share/cmake/${NAME}")
    set(CONFIG_FILE "${CONFIG_DIR}/${NAME}Config.cmake")
    
    # Check if Meson already generated CMake config
    if(EXISTS ${CONFIG_FILE})
        message(STATUS "Ptah Meson: Using existing CMake config for ${NAME}")
        return()
    endif()
    
    # Check for pkg-config files (Meson often generates these)
    set(PKGCONFIG_FILE "${INSTALL_DIR}/lib/pkgconfig/${NAME}.pc")
    if(EXISTS ${PKGCONFIG_FILE})
        message(STATUS "Ptah Meson: Generating CMake config from pkg-config for ${NAME}")
        ptah_meson_generate_config_from_pkgconfig(${NAME} ${INSTALL_DIR} ${PKGCONFIG_FILE})
        return()
    endif()
    
    # Generate basic config
    message(STATUS "Ptah Meson: Generating basic CMake config for ${NAME}")
    ptah_meson_generate_basic_config(${NAME} ${INSTALL_DIR})
endfunction()

function(ptah_meson_generate_basic_config NAME INSTALL_DIR)
    set(CONFIG_DIR "${INSTALL_DIR}/share/cmake/${NAME}")
    set(CONFIG_FILE "${CONFIG_DIR}/${NAME}Config.cmake")
    
    file(MAKE_DIRECTORY ${CONFIG_DIR})
    
    # Find libraries
    file(GLOB_RECURSE STATIC_LIBS "${INSTALL_DIR}/lib/*.a")
    file(GLOB_RECURSE SHARED_LIBS "${INSTALL_DIR}/lib/*.so" "${INSTALL_DIR}/lib/*.dylib")
    
    set(LIBS ${SHARED_LIBS})
    if(NOT LIBS)
        set(LIBS ${STATIC_LIBS})
    endif()
    
    # Generate config content
    set(CONFIG_CONTENT "# Generated by Ptah Library Manager
# CMake configuration for ${NAME} (Meson-based library)

include(CMakeFindDependencyMacro)

# Define the target
if(NOT TARGET ${NAME}::${NAME})
    add_library(${NAME}::${NAME} INTERFACE IMPORTED)
    
    # Set include directories
    set_target_properties(${NAME}::${NAME} PROPERTIES
        INTERFACE_INCLUDE_DIRECTORIES \"${INSTALL_DIR}/include\"
    )
")
    
    # Add libraries if found
    if(LIBS)
        string(APPEND CONFIG_CONTENT "    
    # Set library paths
    set_target_properties(${NAME}::${NAME} PROPERTIES
        INTERFACE_LINK_LIBRARIES \"")
        
        foreach(LIB ${LIBS})
            string(APPEND CONFIG_CONTENT "${LIB};")
        endforeach()
        
        string(APPEND CONFIG_CONTENT "\"
    )
")
    endif()
    
    string(APPEND CONFIG_CONTENT "endif()

# Mark as found
set(${NAME}_FOUND TRUE)
")
    
    file(WRITE ${CONFIG_FILE} ${CONFIG_CONTENT})
endfunction()

function(ptah_meson_generate_config_from_pkgconfig NAME INSTALL_DIR PKGCONFIG_FILE)
    # This would parse the .pc file and generate a CMake config
    # For now, fall back to basic config
    ptah_meson_generate_basic_config(${NAME} ${INSTALL_DIR})
endfunction()